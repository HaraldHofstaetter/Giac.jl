a2q(A,X) = giac(:a2q,Any[A,X])
abcuv(a,b,c) = giac(:abcuv,Any[a,b,c])
abcuv(a,b,c,var) = giac(:abcuv,Any[a,b,c,var])
acos2asin(ex) = giac(:acos2asin, ex)
acos2atan(ex) = giac(:acos2atan, ex)
acot(x::Gen) = giac(:acot, x)
acsc(x::Gen) = giac(:acsc, x)
adjoint_matrix(A) = giac(:adjoint_matrix, A)
sign(x::Gen) = giac(:sign,x)

collect(ex::Gen) = giac(:collect, ex)
collect(exs::Array{Giac.Gen_SYMB}) = giac(:collect, giac(exs))
factor(ex::Gen, sr)= giac(:factor, [ex, sr])
diff(ex::Gen, vars...) = giac(:derive, Any[ex, vars...])
diff(ex::Gen, vars::Array) = giac(:derive, Any[ex, vars])
function ctranspose(f::Gen) 
    x = giac_identifier("__x__")
    unapply(diff(f(x),x),x)
end    
partfrac(ex) = giac(:partfrac, ex)
partfrac(ex, var) = giac(:partfrac, [ex, var])
equal(left, right) = giac(:equal, [left, right])
â©¦(a,b) = equal(a, b)
right(eq) = giac(:right, eq)
left(eq) = giac(:left, eq)
denom(ex) = giac(:denom, ex)
numer(ex) = giac(:numer, ex)
subst(ex, var, val) = giac(:subst, [ex, var, val])
subst(ex, var_val::Pair) = giac(:subst, [ex, var_val[1], var_val[2]])
subst(ex, var_val1::Pair, var_val2::Pair) = subst(subst(ex, var_val1[1], var_val1[2]), var_val2[1], var_val2[2])
subst(ex, var_val1::Pair, var_val2::Pair, var_val3::Pair) = 
    subst(subst(subst(ex, var_val1[1], var_val1[2]), var_val2[1], var_val2[2]), var_val3[1], var_val3[2])
limit(ex, var, val) = giac(:limit, [ex, var, val])
limit(ex, var_val::Pair) = giac(:limit, [ex, var_val[1], var_val[2]])
limit(ex, var, val, dir) = giac(:limit, [ex, var, val, dir])
limit(ex, var_val::Pair, dir) = giac(:limit, [ex, var_val[1], var_val[2], dir])
series(ex, var, val) = giac(:series, Any[ex, var, val])
series(ex, var, val, order) = giac(:series, Any[ex, var, val, order])
series(ex, var_val::Pair) = giac(:series, Any[ex, var_val[1], var_val[2]])
series(ex, var_val::Pair, order) = giac(:series, Any[ex, var_val[1], var_val[2], order])
series(ex, var, val, order, dir) = giac(:series, Any[ex, var, val, order, dir])
series(ex, var_val::Pair, order, dir) = giac(:series, Any[ex, var_val[1], var_val[2], order, dir])
sum(ex::Gen) = giac(:sum, ex)
sum(ex::Gen, x::Gen) = giac(:sum, giac([ex, x], subtype=1))
sum(ex::Gen, x::Gen, a::Union{Gen,Number}, b::Union{Gen,Number}) = giac(:sum, giac([ex, x, a, b], subtype=1))
sum(ex::Gen, x::Gen, a::Union{Gen,Number}, b::Union{Gen,Number}, step::Union{Gen,Number}) = 
    giac(:sum, giac([ex, x, a, b, step], subtype=1))
curl(exs, vars) = giac(:curl, giac(Any[exs, vars], subtype=1))
divergence(exs, vars) = giac(:divergence, giac(Any[exs, vars], subtype=1))
grad(ex, vars) = giac(:grad, Any[ex, vars])
hessian(ex, vars) = giac(:hessian, giac(Any[ex, vars], subtype=1))
solve(eqs, var) = giac(:solve, giac(Any[eqs, var], subtype=1))
preval(ex, a, b) = giac(:preval, [ex, a, b])
preval(ex, a, b, var) = giac(:preval, [ex, a, b, var])
sum_riemann(expr, vars) = giac(:sum_riemann, giac(Any[expr, vars], subtype=1))
taylor(ex, var) = giac(:taylor, Any[ex, var])
taylor(ex, var, order) = giac(:taylor, Any[ex, var, order])
taylor(ex, var_val::Pair) = giac(:taylor, Any[ex, var_val[1], var_val[2]])
taylor(ex, var_val::Pair, order) = giac(:taylor, Any[ex, var_val[1], order, var_val[2]])
divpc(p1, p2, order) = giac(:divpc, [p1, p2, order])
solve(eq) = giac(:solve, eq)
cSolve(eq) = giac(:cSolve, eq)
cSolve(eqs, var) = giac(:cSolve, giac(Any[eqs, var], subtype=1))
zeros(ex::Gen) = giac(:zeros, ex)
zeros(exs, var) = giac(:zeros, giac(Any[exs, var], subtype=1))
cZeros(eq::Gen) = giac(:cZeros, eq)
cZeros(exs, var) = giac(:cZeros, giac(Any[exs, var], subtype=1))
fSolve(eqs, vars, guess) = giac(:fsolve, giac(Any[eqs, vars, guess], subtype=1))
fSolve(eqs, var_guess::Pair) = giac(:fsolve, giac(Any[eqs, var_guess[1], var_guess[2]], subtype=1))
fSolve(eqs, vars) = giac(:fsolve, giac(Any[eqs, vars], subtype=1))
fSolve(eqs) = giac(:fsolve, eqs)
deSolve(eq, var) = giac(:desolve, giac(Any[eq, var], subtype=1))
deSolve(eq, timevar, var) = giac(:desolve, giac(Any[eq, timevar, var], subtype=1))
linsolve(eqs, vars) = giac(:linsolve, giac(Any[eqs, vars], subtype=1))

texpand(ex) = giac(:texpand, ex)

integrate(ex::Gen) = giac(:integrate, ex)
integrate(ex::Gen, var::Gen) = giac(:integrate, [ex, var])
integrate(ex::Gen, var::Gen, a::Union{Gen,Number}, b::Union{Gen,Number}) =
    giac(:integrate, [ex, var, a, b])
    


